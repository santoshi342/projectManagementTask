import React, { useEffect, useState } from "react";
import {useNavigate,useLocation} from "react-router-dom";
import { Link } from 'react-router-dom'
import { useParams } from "react-router";

const Features = () => {
  const id1=useParams();

  const [feature,setFeature] = useState( [
    { projectId: id1.id ,name:"Feature1",id:1 },
    ])

  const [inputProject, SetinputProject] = useState();
  const [data, Setdata] = useState();
  const [isVisible, SteisVisible] = useState();
  const [updatedInput, SetupatedInput] = useState();
  const navigate= useNavigate();

  const handleChange = (e) => {
    console.log("handleChange");
    SetinputProject(e.target.value);
  };
  useEffect(() => {
    // Setdata(project)
    localStorage.setItem("features", JSON.stringify(feature));
  }, [feature]);
  const clickEvent = () => {
    console.log(11111222333,feature)
    const name = inputProject;
    const projectId=id1.id;
    const ids = feature.map((post) => {
      return post.id;
    });

    const id = Math.max.apply(null, ids) + 1;
    const post = { projectId: projectId, name: name,id: id };
     feature.push(post);
    setFeature([...feature]);
  };

  const deleteProject = (id) => {
    console.log("deleed");
    console.log("first", id);
    const data1 = feature.filter((feature1) => feature1.id !== id);
    setFeature(data1);
  };


  const editproject = (id, name) => {
    console.log("edited", id);
    SteisVisible(id);
    SetupatedInput(name);
  };

  const updateChange = (e) => {
    SetupatedInput(e.target.value);
  };

  const updateEvent = (id, name) => {
    console.log("updated ", id);
    console.log("updated2 ", name);
    let posts = feature;
    posts.map((post) => {
      if (post.id === id) {
        post.name = name;
      }
      // console.log('ppppppp', post.id, id)
      // console.log('ttttttttt', post.title)
    });
    setFeature( posts );
    SteisVisible('')
    console.log(4444, feature);
  };
  
  const jumpEvent=(id,name)=>{
      console.log("jumped",name)
      // navigate("/todolist")
      navigate(`/todolist/${id}`)
      // localStorage.setItem("jumped2",(name));

  }

  return (
    <div>
      <div> 
      <button onClick={() => navigate(-1)}> Go back </button>
        {/* <Link to="/">Back to Project!!!</Link> */}
      </div>
      {/* <h1>{project}</h1> */}
      <h1>{id1.id}</h1>   
      {
        feature.filter((item)=>item.projectId===id1.id).map((features,index)=>{
         return(
           <div key={index}>
             {
               isVisible===features.id ? 
               <div>
                <input
                  type="text"
                  value={updatedInput}
                  onChange={updateChange}
                />
                <button
                  onClick={() => {
                    updateEvent(features.id, updatedInput);
                  }}
                >
                  Update
                </button>
              </div>: <div><p>
             {features.id} : {features.name}
             </p>
             <button onClick={()=>{editproject(features.id,features.name)}}>Edit</button>
             <button onClick={()=>{deleteProject(features.id)}}>Delete</button></div>
             }
             
           </div>
         )
        })
      }   
      <input type="text" onChange={handleChange} />
      <button onClick={clickEvent}> Add Features</button>
  
      

    </div>
  )
}

export default Features


///// my feature file

const project = [
  { id: 1, name: "ToDo1" },
  { id: 2, name: "ToDo2" },
];
const id1= useParams();

const [inputProject, SetinputProject] = useState();
const [id, Setid] = useState(2);
const [data, Setdata] = useState([]);
const [isVisible, SetisVisible] = useState();
const navigate = useNavigate();
const [updateProject, SetupdateProject] = useState();

useEffect(() => {
  Setdata(project);
}, []);

const addToDo = () => {
  const name = inputProject;
  const ids = data.map((post) => {
    return post.id;
  });
  const id = Math.max.apply(null, ids) + 1;
  const post = { id: id, name: name };
  let posts = data.concat(post);
  Setdata(posts);
};

const deleteToDo = (id) => {
  const data1 = data.filter((project) => {
    if (project.id != id) {
      return project;
    }
  });
  Setdata(data1);
};

const updateToDo = (id, name) => {
  console.log("11111", id, name);
};

const editToDo = (id, name) => {
  console.log("edited", id);
  SetisVisible(id);
};

return (
  <div>
    <center className="main-container">
      <div className="app">
        <div className="backtoprojects">
    
      <button className="backtoprojects1" onClick={()=>navigate(-1)}>Back</button>
     
      </div>

        <h3>{id1.id.toUpperCase()}</h3>
        <hr />
        <h3>ToDo List</h3>

        {data.map((project, index) => {
          return (
            <div key={index}>
              {isVisible === project.id ? (
                <div>
                  <input
                    type="text"
                    onChange={(e) => SetupdateProject(e.target.value)}
                  />
                  <button
                    className="editbtn"
                    onClick={() => {
                      updateToDo(project.id, project.name);
                    }}
                  >
                    Update
                  </button>
                  <br />
                </div>
              ) : (
                <div>
                  <p>
                    {project.id} {""} {project.name}{" "}
                  </p>
                  <button
                    className="editbtn"
                    onClick={() => {
                      editToDo(project.id, project.name);
                    }}
                  >
                    Edit
                  </button>{" "}
                  <button
                    className="deletebtn"
                    onClick={() => {
                      deleteToDo(project.id);
                    }}
                  >
                    Remove
                  </button>
                </div>
              )}
            </div>
          );
        })}
        <br />

        <div>
          <input
            type="text"
            onChange={(e) => SetinputProject(e.target.value)}
          />
          <button onClick={addToDo} className="addbtn">
            {" "}
            +
          </button>
        </div>
        <br />
      </div>
    </center>
  </div>
)